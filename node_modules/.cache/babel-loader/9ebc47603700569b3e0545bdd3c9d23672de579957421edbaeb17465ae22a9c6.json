{"ast":null,"code":"// src/context/EventContext.js\nimport React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * TODO: Phase 2 - Event State Management\n * \n * State Management:\n * - Event listings\n * - RSVP tracking\n * - Capacity management\n * - Waitlist handling\n * - Location privacy\n * \n * Privacy Features:\n * - No persistent storage\n * - Anonymous participation\n * - Temporary tokens\n * - Encrypted state\n * \n * Future Enhancements:\n * - Real-time updates\n * - Weather integration\n * - Emergency alerts\n * - Buddy system matching\n * - Equipment sharing\n */const EventContext=/*#__PURE__*/createContext();export function EventProvider(_ref){let{children}=_ref;const[events,setEvents]=useState([]);// More state management coming in Phase 2\nconst value={events,setEvents// Future methods will be added here\n};return/*#__PURE__*/_jsx(EventContext.Provider,{value:value,children:children});}export function useEventContext(){const context=useContext(EventContext);if(!context){throw new Error('useEventContext must be used within an EventProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","EventContext","EventProvider","_ref","children","events","setEvents","value","Provider","useEventContext","context","Error"],"sources":["/home/elysia/dancingdragons/src/context/EventContext.js"],"sourcesContent":["// src/context/EventContext.js\n\nimport React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * TODO: Phase 2 - Event State Management\n * \n * State Management:\n * - Event listings\n * - RSVP tracking\n * - Capacity management\n * - Waitlist handling\n * - Location privacy\n * \n * Privacy Features:\n * - No persistent storage\n * - Anonymous participation\n * - Temporary tokens\n * - Encrypted state\n * \n * Future Enhancements:\n * - Real-time updates\n * - Weather integration\n * - Emergency alerts\n * - Buddy system matching\n * - Equipment sharing\n */\n\nconst EventContext = createContext();\n\nexport function EventProvider({ children }) {\n  const [events, setEvents] = useState([]);\n  // More state management coming in Phase 2\n\n  const value = {\n    events,\n    setEvents,\n    // Future methods will be added here\n  };\n\n  return (\n    <EventContext.Provider value={value}>\n      {children}\n    </EventContext.Provider>\n  );\n}\n\nEventProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport function useEventContext() {\n  const context = useContext(EventContext);\n  if (!context) {\n    throw new Error('useEventContext must be used within an EventProvider');\n  }\n  return context;\n}"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAAC,CAAC,CAEpC,MAAO,SAAS,CAAAM,aAAaA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACxC;AAEA,KAAM,CAAAS,KAAK,CAAG,CACZF,MAAM,CACNC,SACA;AACF,CAAC,CAED,mBACEN,IAAA,CAACC,YAAY,CAACO,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAH,QAAA,CACjCA,QAAQ,CACY,CAAC,CAE5B,CAMA,MAAO,SAAS,CAAAK,eAAeA,CAAA,CAAG,CAChC,KAAM,CAAAC,OAAO,CAAGb,UAAU,CAACI,YAAY,CAAC,CACxC,GAAI,CAACS,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACA,MAAO,CAAAD,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}